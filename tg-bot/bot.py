import requests
from telegram import Update
from telegram.ext import (
    ApplicationBuilder,
    ContextTypes,
    MessageHandler,
    CommandHandler,
    filters
)
from telegram.error import TelegramError
import logging

logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

TOKEN = 'your_token'
SERVER_URL = 'http://localhost:5001/answer'

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        welcome_text = (
            "üëã –ü—Ä–∏–≤–µ—Ç! –Ø ‚Äî –ò–ò-–ø–æ–º–æ—â–Ω–∏–∫ –ø–æ –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–º —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è–º –¥–ª—è –¥–µ—Ç–µ–π —Å –û–í–ó.\n\n"
            "–Ø –º–æ–≥—É –ø–æ–¥—Å–∫–∞–∑–∞—Ç—å:\n"
            "‚úÖ –ö–∞–∫–∏–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –ø–æ–¥–æ–π–¥—É—Ç –ø—Ä–∏ –î–¶–ü, –†–ê–°, –Ω–∞—Ä—É—à–µ–Ω–∏—è—Ö —Å–ª—É—Ö–∞/–∑—Ä–µ–Ω–∏—è, –°–î–í–ì –∏ –¥—Ä.\n"
            "‚úÖ –ö–∞–∫ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –∑–∞–Ω–∏–º–∞—Ç—å—Å—è —Å —É—á–µ—Ç–æ–º –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–µ–π —Ä–µ–±–µ–Ω–∫–∞\n"
            "‚úÖ –ò–≥—Ä–æ–≤—ã–µ –º–µ—Ç–æ–¥–∏–∫–∏ –¥–ª—è —Ä–∞–∑–≤–∏—Ç–∏—è –º–æ—Ç–æ—Ä–∏–∫–∏, —Ä–µ—á–∏ –∏ –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏–∏\n\n"
            "–ü—Ä–æ—Å—Ç–æ –∑–∞–¥–∞–π –≤–æ–ø—Ä–æ—Å, –Ω–∞–ø—Ä–∏–º–µ—Ä:\n"
            "‚ñ™ –ö–∞–∫–∏–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –¥–ª—è —Ä–µ–±–µ–Ω–∫–∞ —Å –∞—É—Ç–∏–∑–º–æ–º 6 –ª–µ—Ç?\n"
            "‚ñ™ –ö–∞–∫ —É–ª—É—á—à–∏—Ç—å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏—é —É —Å–ª–∞–±–æ–≤–∏–¥—è—â–µ–≥–æ —Ä–µ–±–µ–Ω–∫–∞?\n"
            "‚ñ™ –ù—É–∂–Ω–∞ –≥–∏–º–Ω–∞—Å—Ç–∏–∫–∞ –ø—Ä–∏ –î–¶–ü –¥–ª—è –Ω–æ–≥\n\n"
            "–ù–∞–ø–∏—à–∏ –º–Ω–µ, –∏ —è –ø–æ—Å—Ç–∞—Ä–∞—é—Å—å –ø–æ–º–æ—á—å! üåü\n"
        )
        await update.message.reply_text(welcome_text)
    except TelegramError as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è: {e}")

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):

    try:
        question = update.message.text
        logger.info(f"–ü–æ–ª—É—á–µ–Ω –≤–æ–ø—Ä–æ—Å: {question}")

        try:
            response = requests.post(SERVER_URL, json={'question': question}, timeout=10)
            response.raise_for_status()
            data = response.json()
        except requests.exceptions.RequestException as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ —Å–µ—Ä–≤–µ—Ä—É: {e}")
            await update.message.reply_text("–°–µ—Ä–≤–µ—Ä –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ")
            return

        if 'error' in data:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {data['error']}")
            await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–æ–ø—Ä–æ—Å–∞")
            return

        answer = data.get('answer', '')
        confidence = data.get('confidence', 0)

        print(confidence)
        
        if not answer:
            response_text = "–ó–∞—Ç—Ä—É–¥–Ω—è—é—Å—å –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –≤–∞—à –≤–æ–ø—Ä–æ—Å. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞–º: @rostOk_world"
        elif confidence >= 0.99999:
            response_text = f"{answer}"
        else:
            response_text = f"{answer}\n\n–ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞–º: @rostOk_world"
        
        await update.message.reply_text(response_text)
        
    except TelegramError as e:
        logger.error(f"–û—à–∏–±–∫–∞ Telegram API: {e}")
    except Exception as e:
        logger.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞")

def main():
    try:
        app = ApplicationBuilder().token(TOKEN).build()
        
        app.add_handler(CommandHandler("start", start))
        app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
        
        app.add_error_handler(error_handler)
        
        logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
        app.run_polling()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")

async def error_handler(update: object, context: ContextTypes.DEFAULT_TYPE):
    logger.error(f"–û—à–∏–±–∫–∞: {context.error}", exc_info=context.error)
    
    if update and hasattr(update, 'message'):
        try:
            await update.message.reply_text(
                "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            )
        except TelegramError:
            pass

if __name__ == '__main__':
    main()